<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Alliance extends \App\Entity\Alliance implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'abbreviation', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'color', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'creation', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'chest', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'open', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'users', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'description', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'allianceMembers', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'pirate_code', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'allianceHistories', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'advert', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'required_power', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'allianceWars'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'abbreviation', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'color', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'creation', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'chest', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'open', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'users', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'description', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'allianceMembers', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'pirate_code', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'allianceHistories', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'advert', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'required_power', '' . "\0" . 'App\\Entity\\Alliance' . "\0" . 'allianceWars'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Alliance $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbbreviation(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbbreviation', []);

        return parent::getAbbreviation();
    }

    /**
     * {@inheritDoc}
     */
    public function setAbbreviation(string $abbreviation): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAbbreviation', [$abbreviation]);

        return parent::setAbbreviation($abbreviation);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor(string $color): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function isFull(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFull', []);

        return parent::isFull();
    }

    /**
     * {@inheritDoc}
     */
    public function getLeader(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeader', []);

        return parent::getLeader();
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaderMember(): ?\App\Entity\AllianceMember
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaderMember', []);

        return parent::getLeaderMember();
    }

    /**
     * {@inheritDoc}
     */
    public function updateLeader(\App\Entity\User $new)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateLeader', [$new]);

        return parent::updateLeader($new);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreation(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreation', []);

        return parent::getCreation();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreation(\DateTimeInterface $creation): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreation', [$creation]);

        return parent::setCreation($creation);
    }

    /**
     * {@inheritDoc}
     */
    public function getChest(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChest', []);

        return parent::getChest();
    }

    /**
     * {@inheritDoc}
     */
    public function setChest(int $chest): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChest', [$chest]);

        return parent::setChest($chest);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpen(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpen', []);

        return parent::getOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpen(bool $open): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpen', [$open]);

        return parent::setOpen($open);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\App\Entity\User $user): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$user]);

        return parent::addUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\App\Entity\User $user): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$user]);

        return parent::removeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(string $description): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllianceMembers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllianceMembers', []);

        return parent::getAllianceMembers();
    }

    /**
     * {@inheritDoc}
     */
    public function addAllianceMember(\App\Entity\AllianceMember $allianceMember): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAllianceMember', [$allianceMember]);

        return parent::addAllianceMember($allianceMember);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllianceMember(\App\Entity\AllianceMember $allianceMember): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllianceMember', [$allianceMember]);

        return parent::removeAllianceMember($allianceMember);
    }

    /**
     * {@inheritDoc}
     */
    public function getPirateCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPirateCode', []);

        return parent::getPirateCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setPirateCode(?string $pirate_code): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPirateCode', [$pirate_code]);

        return parent::setPirateCode($pirate_code);
    }

    /**
     * {@inheritDoc}
     */
    public function getChief(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChief', []);

        return parent::getChief();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllianceHistories(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllianceHistories', []);

        return parent::getAllianceHistories();
    }

    /**
     * {@inheritDoc}
     */
    public function addAllianceHistory(\App\Entity\AllianceHistory $allianceHistory): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAllianceHistory', [$allianceHistory]);

        return parent::addAllianceHistory($allianceHistory);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllianceHistory(\App\Entity\AllianceHistory $allianceHistory): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllianceHistory', [$allianceHistory]);

        return parent::removeAllianceHistory($allianceHistory);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdvert(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdvert', []);

        return parent::getAdvert();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdvert(?string $advert): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdvert', [$advert]);

        return parent::setAdvert($advert);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequiredPower(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequiredPower', []);

        return parent::getRequiredPower();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequiredPower(int $required_power): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequiredPower', [$required_power]);

        return parent::setRequiredPower($required_power);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllianceWars(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllianceWars', []);

        return parent::getAllianceWars();
    }

    /**
     * {@inheritDoc}
     */
    public function addAllianceWar(\App\Entity\AllianceWar $allianceWar): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAllianceWar', [$allianceWar]);

        return parent::addAllianceWar($allianceWar);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAllianceWar(\App\Entity\AllianceWar $allianceWar): \App\Entity\Alliance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAllianceWar', [$allianceWar]);

        return parent::removeAllianceWar($allianceWar);
    }

}
